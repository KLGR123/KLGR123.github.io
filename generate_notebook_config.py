#!/usr/bin/env python3
"""
Auto-generate notebook configuration file by scanning assets/jupyter/ directory.
This script automatically discovers all .ipynb files and generates the config.
"""

import os
import json
from datetime import datetime
from pathlib import Path

def format_display_name(folder_name):
    """Format folder name for display."""
    display_names = {
        'andrej-transformer': 'Andrej Transformer',
        'machine-learning': 'Machine Learning', 
        'math': 'Math',
        'pytorch': 'PyTorch',
        'reinforcement-learning': 'Reinforcement Learning',
        'trl': 'TRL',
        'deep-learning': 'Deep Learning',
        'computer-vision': 'Computer Vision',
        'nlp': 'Natural Language Processing',
        'data-science': 'Data Science',
        'neural-networks': 'Neural Networks'
    }
    
    return display_names.get(folder_name, 
                            folder_name.replace('-', ' ').replace('_', ' ').title())

def scan_jupyter_directory():
    """Scan assets/jupyter/ directory for all .ipynb files."""
    jupyter_path = Path('assets/jupyter')
    
    if not jupyter_path.exists():
        print(f"‚ùå Directory {jupyter_path} does not exist")
        return {}
    
    config = {
        'folders': {},
        'lastUpdated': datetime.now().isoformat()
    }
    
    print(f"üîç Scanning {jupyter_path} for notebook files...")
    
    # Scan all subdirectories
    for folder_path in jupyter_path.iterdir():
        if folder_path.is_dir():
            folder_name = folder_path.name
            
            # Skip hidden directories
            if folder_name.startswith('.'):
                continue
                
            print(f"üìÇ Scanning folder: {folder_name}")
            
            # Find all .ipynb files in this folder
            ipynb_files = []
            for file_path in folder_path.glob('*.ipynb'):
                if not file_path.name.startswith('.'):  # Skip hidden files
                    ipynb_files.append(file_path.name)
                    print(f"  ‚úÖ Found: {file_path.name}")
            
            if ipynb_files:
                # Sort files for consistent ordering
                ipynb_files.sort()
                
                config['folders'][folder_name] = {
                    'displayName': format_display_name(folder_name),
                    'files': ipynb_files
                }
                print(f"üìÅ Added folder '{folder_name}' with {len(ipynb_files)} files")
            else:
                print(f"  ‚ö†Ô∏è No .ipynb files found in {folder_name}")
    
    print(f"üìö Total folders found: {len(config['folders'])}")
    return config

def generate_js_config(config):
    """Generate JavaScript configuration file."""
    js_content = f"""// Notebook folders configuration
// This file is automatically generated by generate_notebook_config.py
// Last updated: {config['lastUpdated']}
window.notebookConfig = {json.dumps(config, indent=2, ensure_ascii=False)};"""
    
    config_path = Path('assets/js/notebook-config.js')
    
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print(f"‚úÖ Generated {config_path}")
    return config_path

def main():
    """Main function."""
    print("üöÄ Generating notebook configuration...")
    
    # Change to script directory
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    # Scan directory structure
    config = scan_jupyter_directory()
    
    if not config['folders']:
        print("‚ùå No notebook folders found!")
        return
    
    # Generate JavaScript config file
    config_path = generate_js_config(config)
    
    print(f"üéâ Configuration generated successfully!")
    print(f"üìù Found {len(config['folders'])} folders with notebooks:")
    
    for folder_name, folder_data in config['folders'].items():
        files_count = len(folder_data['files'])
        print(f"  - {folder_data['displayName']}: {files_count} files")
    
    print(f"\nüí° Tips:")
    print(f"  - Add new .ipynb files to assets/jupyter/<folder>/ and run this script again")
    print(f"  - Edit {config_path} manually to customize display names")
    print(f"  - This script automatically runs when you use export.py")

if __name__ == '__main__':
    main()
